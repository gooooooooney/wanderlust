generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Banner {
  id          String   @id
  pageInfoId  String  
  order       Int
  imageUrl    String   @default("")
  description String   @default("")
  imageSrc    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  PageInfo    PageInfo @relation(fields: [pageInfoId], references: [id], onDelete: Cascade)
}

model PageInfo {
  id        String   @id
  userId    String   @unique
  theme     Theme    @default(LIGHT)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Banner    Banner[]
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id      String   @id
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Route {
  id          String   @id
  parentId    String?
  name        String
  href        String   @unique
  icon        String
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String?
  Route       Route?   @relation("RouteToRoute", fields: [parentId], references: [id])
  other_Route Route[]  @relation("RouteToRoute")
  User        User?    @relation(fields: [userId], references: [id])
}

model Settings {
  id               String  @id
  role             String  @unique
  signInCoverImage String?
  signUpCoverImage String?
}

model Tag {
  id          String        @id
  name        String        @unique
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  VirtualTour VirtualTour[]
}

model TwoFactorConfirmation {
  id     String @id
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorToken {
  id      String   @id
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id                    String                 @id
  name                  String?
  email                 String                 @unique
  description           String?
  hashedPassword        String
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  Account               Account[]
  PageInfo              PageInfo?
  Route                 Route[]
  Tag                   Tag[]
  TwoFactorConfirmation TwoFactorConfirmation?
  VirtualTour           VirtualTour[]
}

model VerificationToken {
  id      String   @id
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VirtualTour {
  id          String   @id
  coverSrc    String?
  userId      String
  title       String?
  description String?
  link        String?
  author      String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tag         Tag[]
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum UserRole {
  ADMIN
  USER
}
