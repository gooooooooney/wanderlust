generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  description           String?
  hashedPassword        String
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  videoSrc              String?
  accounts              Account[]
  pageInfo              PageInfo?
  routes                Route[]
  tags                  Tag[]
  twoFactorConfirmation TwoFactorConfirmation?
  virtualTours          VirtualTour[]
}

model Route {
  id        String   @id @default(uuid())
  parentId  String?  @map("parentId")
  name      String
  href      String   @unique
  icon      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  parent    Route?   @relation("children", fields: [parentId], references: [id])
  children  Route[]  @relation("children")
  User      User?    @relation(fields: [userId], references: [id])
}

model Settings {
  id               String  @id @default(uuid())
  role             String  @unique
  signInCoverImage String?
  signUpCoverImage String?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VirtualTour {
  id          String   @id @default(uuid())
  coverSrc    String?
  userId      String
  title       String?
  description String?
  link        String?
  author      String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]    @relation("TagToVirtualTour")
}

model Tag {
  id           String        @id @default(uuid())
  name         String        @unique
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  virtualTours VirtualTour[] @relation("TagToVirtualTour")
}

model PageInfo {
  id        String   @id @default(uuid())
  userId    String   @unique
  theme     Theme    @default(LIGHT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  banner    Banner[]
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Banner {
  id          String   @id @default(uuid())
  pageInfoId  String
  order       Int
  imageUrl    String   @default("")
  description String   @default("")
  imageSrc    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pageInfo    PageInfo @relation(fields: [pageInfoId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}
